plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

// See https://guides.gradle.org/creating-multi-project-builds/

allprojects {
    repositories {
        jcenter() 
    }
	group 'edu.louisville.astro.software'
}

repositories {
}

subprojects {
    version = '5.0.0-SNAPSHOT'
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
    implementation project(':ij')
    implementation project(':Astronomy_')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

mainClassName = 'AIJ.Merged.App'

application {
    setMainClassName(mainClassName)
}

jar {
    manifest {
        attributes("Main-Class": mainClassName)
    }
    exclude("resources/outer/**") //prevent outer files being shipped twice
}

task createPlugins {
    def plugins = file("$buildDir/plugins")
    outputs.dir plugins
    doLast {
        plugins.mkdirs()
        new File(plugins, 'readme.md').write("test")
    }
}

distributions {
    main {
        contents {
            from(createPlugins) {
                into 'plugins'
            }
            // Copy astronomy_.jar to correct place in distribution
            from(file("${project(':Astronomy_').buildDir}/libs/astronomy_-${project(':Astronomy_').version}.jar")) {
                rename {String name -> return 'Astronomy_.jar'}
                into 'plugins'
            }

            // Copy other plugins
            from(file("${buildDir}/resources/main/plugins")) {
                into 'plugins'
            }

            // Copy root files
            from(file("${buildDir}/resources/main/outer")) {
                into ''
            }

            // Copy ij.jar to correct place in distribution
            from(file("${project(':ij').buildDir}/libs/ij-${project(':ij').version}.jar")) {
                rename {String name -> return 'ij.jar'}
                into ''
            }
        }
    }
}

// Task to copy built jars into a certain folder, for use with testing
task copyBuiltJars(dependsOn: build, type: Copy) {
    // Copy astronomy_.jar
    from(file("${project(':Astronomy_').buildDir}/libs/astronomy_-${project(':Astronomy_').version}.jar")) {
        rename {String name -> return 'Astronomy_.jar'}
        into ''
    }
    // Copy ij.jar
    from(file("${project(':ij').buildDir}/libs/ij-${project(':ij').version}.jar")) {
        rename {String name -> return 'ij.jar'}
        into ''
    }
    into "${projectDir}/out"
}

// TODO better method than getting the distribution and unzipping it
task unzip(dependsOn: distZip, type: Copy) {
    from zipTree(file("${buildDir}/distributions/AIJ-Merged.zip"))
    into projectDir
}

// Generates a working install directory of AIJ and launches it - make sure to not att it to git!
task aijRun(dependsOn: unzip, type: JavaExec) {
    group 'AstroImageJ Developement'


    workingDir(file("${projectDir}/AIJ-Merged/"))

    main="-jar"
    args "${projectDir}/AIJ-Merged/ij.jar"

}

distZip {
	
}

distTar {
    enabled = false
}