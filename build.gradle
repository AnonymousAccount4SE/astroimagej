plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // Plugin to download files
    id "de.undercouch.download" version "4.1.1"
}

// See https://guides.gradle.org/creating-multi-project-builds/

allprojects {
    repositories {
        jcenter()
    }
    group 'edu.louisville.astro.software'
}

repositories {
}

subprojects {
    version = '5.0.0-SNAPSHOT'
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
    implementation project(':ij')
    implementation project(':Astronomy_')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

task createPlugins {
    def plugins = file("$buildDir/plugins")
    outputs.dir plugins
    doLast {
        plugins.mkdirs()
        new File(plugins, 'readme.md').write("test")
    }
}

def jreBaseName = "zulu8.48.0.53-ca-jre8.0.265"

def downloadJREs = project.download {
    String[] platforms = ["macosx", "linux", "win"]
    for (String sys : platforms) {
        src createURL(jreBaseName, sys)
        overwrite false
        dest new File(buildDir, "jres")
    }
}

def downloadPackr = project.download {
    src "https://github.com/libgdx/packr/releases/download/packr-2.7.0/packr-all-2.7.0.jar"
    overwrite false
    dest new File(buildDir, "packr.jar")
}

String createURL(String base, String sys) {
    return "https://cdn.azul.com/zulu/bin/" + base + "-" + sys + "_x64.zip"
}

def commonDist = project.copySpec {
    from(createPlugins) {
        into 'plugins'
    }
    // Copy astronomy_.jar to correct place in distribution
    from(file("${project(':Astronomy_').buildDir}/libs/astronomy_-${project(':Astronomy_').version}.jar")) {
        rename { String name -> return 'Astronomy_.jar' }
        into 'plugins'
    }

    from("${projectDir}/packageFiles/common") {
        into ''
    }

    into('plugins') {
        from(file("${projectDir}/packageFiles/plugins"))
    }

    // Copy ij.jar to correct place in distribution
    from(file("${project(':ij').buildDir}/libs/ij-${project(':ij').version}.jar")) {
        rename { String name -> return 'ij.jar' }
        into ''
    }
}

distributions {
    main {
        contents {
            exclude { it }
        }
    }
    windows {
        contents {
            with commonDist
            // Copy root files
            from(file("${projectDir}/packageFiles/windows")) {
                into ''
            }

            // Copy JRE
            from(zipTree(file("${buildDir}/jres/${jreBaseName}-win_x64.zip"))) {
                into ''
            }
            // Rename folder to jre
            it.filesMatching("**/${jreBaseName}-win_x64/**/*") {
                it.path = it.path.replace("${jreBaseName}-win_x64", "jre")
            }
            includeEmptyDirs = false // remove old jre folder
        }
    }

    linux {
        contents {
            with commonDist
            // Copy root files
            from(file("${projectDir}/packageFiles/linux")) {
                into ''
            }

            from(zipTree(file("${buildDir}/jres/${jreBaseName}-linux_x64.zip"))) {
                into 'jre'
            }

            // Copy JRE
            from(zipTree(file("${buildDir}/jres/${jreBaseName}-linux_x64.zip"))) {
                into ''
            }
            // Rename folder to jre
            it.filesMatching("**/${jreBaseName}-linux_x64/**/*") {
                it.path = it.path.replace("${jreBaseName}-linux_x64", "jre")
            }
            includeEmptyDirs = false // remove old jre folder
        }
    }
}

// Task to copy built jars into a certain folder, for use with testing
task copyBuiltJars(dependsOn: build, type: Copy) {
    group 'AstroImageJ Developement'

    // Copy astronomy_.jar
    from(file("${project(':Astronomy_').buildDir}/libs/astronomy_-${project(':Astronomy_').version}.jar")) {
        rename { String name -> return 'Astronomy_.jar' }
        into ''
    }
    // Copy ij.jar
    from(file("${project(':ij').buildDir}/libs/ij-${project(':ij').version}.jar")) {
        rename { String name -> return 'ij.jar' }
        into ''
    }
    into "${projectDir}/out"
}

task sync(dependsOn: jar, type: Sync) {
    with commonDist
    destinationDir(file("${projectDir}/AIJ-Run"))
}

// Generates a working install directory of AIJ and launches it - make sure to not att it to git!
task aijRun(dependsOn: sync, type: JavaExec) {
    group 'AstroImageJ Developement'

    workingDir(file("${projectDir}/AIJ-Run/"))

    main = "-jar"
    args "${projectDir}/AIJ-Run/ij.jar"

}

task common(dependsOn: build, type: Sync) {
    with commonDist
    destinationDir(file("${buildDir}/common"))
}

task cleanIJ(dependsOn: common) {
    doLast {
        ant.move file: "${buildDir}/common/ij.jar",
                todir: "${buildDir}/image/"
    }
}

task makeMac(dependsOn: cleanIJ, type: JavaExec) {
    group 'AstroImageJ Developement'

    workingDir(file("${buildDir}"))

    main = "-jar";
    args = ["packr.jar",
            "--platform", "mac",
            "--jdk", "${buildDir}/jres/${jreBaseName}-macosx_x64.zip",
            "--executable", "AstroImageJ",
            "--resources", "${buildDir}/common/*",
            "--classpath", "${buildDir}/image/ij.jar",
            "--mainclass", "ij.ImageJ",
            "--vmargs", "Xmx1G",
            "--output", "${buildDir}/distributions/AstroImageJ.app",
            "--icon", "${projectDir}/packageFiles/mac/astronomy_icon.icns",
            "--bundle", "AstroImageJ"
    ]
}

task makeDistributions(dependsOn: makeMac, type: Zip) {
    group 'AstroImageJ Developement'

    archiveFileName = 'AstroimageJ-mac.zip'
    destinationDirectory = file("${buildDir}/distributions/")

    from("${buildDir}/distributions/AstroImageJ.app") {
        into 'AstroImageJ.app'
    }
}

linuxDistZip {
    enabled = false
}

linuxDistTar {
    compression = Compression.GZIP
}

windowsDistTar {
    enabled = false
}

distTar {
    enabled = false
}