import io.github.fvarrui.javapackager.gradle.PackageTask

buildscript {
    repositories {
        //mavenLocal()
        maven {
            url 'gradlePlugins' //TODO switch back to standard java packager for 1.4.1+ once it is on maven
        }
        mavenCentral()
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.3.1-SNAPSHOT'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Plugin to download files
    id "de.undercouch.download" version "4.1.1"
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

// See https://guides.gradle.org/creating-multi-project-builds/

allprojects {
    repositories {
        jcenter()
    }
    group 'edu.louisville.astro.software'
}

repositories {
}

subprojects {
    version = '5.0.0-SNAPSHOT'
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
    implementation project(':ij')
    implementation project(':Astronomy_')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

task createPlugins {
    def plugins = file("$buildDir/plugins")
    outputs.dir plugins
    doLast {
        plugins.mkdirs()
        new File(plugins, 'readme.md').write("test")
    }
}

def jreBaseName = "zulu8.48.0.53-ca-jre8.0.265"

def downloadJREs = project.download {
    String[] platforms = ["macosx", "linux", "win"]
    for (String sys : platforms) {
        src createURL(jreBaseName, sys)
        overwrite false
        dest new File(projectDir, "jres")
    }
}

String createURL(String base, String sys) {
    return "https://cdn.azul.com/zulu/bin/" + base + "-" + sys + "_x64.zip"
}

def commonDist = project.copySpec {
    from(createPlugins) {
        into 'plugins'
    }
    // Copy astronomy_.jar to correct place in distribution
    from(file("${project(':Astronomy_').buildDir}/libs/astronomy_-${project(':Astronomy_').version}.jar")) {
        rename { String name -> return 'Astronomy_.jar' }
        into 'plugins'
    }

    from("${projectDir}/packageFiles/common") {
        into ''
    }

    into('plugins') {
        from(file("${projectDir}/packageFiles/plugins"))
    }

    // Copy ij.jar to correct place in distribution
    from(file("${project(':ij').buildDir}/libs/ij-${project(':ij').version}.jar")) {
        rename { String name -> return 'ij.jar' }
        into ''
    }
}

def unZipJres = project.copySpec {
    from(zipTree(file("${projectDir}/jres/${jreBaseName}-macosx_x64.zip"))) {
        into ''
    }
    from(zipTree(file("${projectDir}/jres/${jreBaseName}-linux_x64.zip"))) {
        into ''
    }
    from(zipTree(file("${projectDir}/jres/${jreBaseName}-win_x64.zip"))) {
        into ''
    }
}

task unZipJresTask(type: Copy) {
    with unZipJres
    into "${projectDir}/jres"
}

task commonFiles(type: Copy) {
    with commonDist
    into "${buildDir}/commonFiles"
}

// Task to copy built jars into a certain folder, for use with testing
task copyBuiltJars(dependsOn: build, type: Copy) {
    group 'AstroImageJ Developement'

    // Copy astronomy_.jar
    from(file("${project(':Astronomy_').buildDir}/libs/astronomy_-${project(':Astronomy_').version}.jar")) {
        rename { String name -> return 'Astronomy_.jar' }
        into ''
    }
    // Copy ij.jar
    from(file("${project(':ij').buildDir}/libs/ij-${project(':ij').version}.jar")) {
        rename { String name -> return 'ij.jar' }
        into ''
    }
    into "${projectDir}/out"
}

task sync(dependsOn: jar, type: Sync) {
    with commonDist
    destinationDir(file("${projectDir}/AIJ-Run"))
}

// Generates a working install directory of AIJ and launches it - make sure to not add it to git!
task aijRun(dependsOn: sync, type: JavaExec) {
    group 'AstroImageJ Developement'

    workingDir(file("${projectDir}/AIJ-Run/"))

    main = "-jar"
    args "${projectDir}/AIJ-Run/ij.jar"

}

javapackager {
    // common configuration
    mainClass = 'ij.ImageJ'
    bundleJre = true
    customizedJre = false
    outputDirectory = file("${buildDir}/distributions")
    additionalResources = file("${buildDir}/commonFiles/").listFiles()
    runnableJar = file("${buildDir}/commonFiles/ij.jar")
    assetsDir = file("${projectDir}/packageFiles/assets")
    name = 'AstroImageJ'
    winConfig.setWrapJar(false) // Don't merge the ij.jar into the exe file
    macConfig.setRelocateJar(false) // Don't place ij.jar in Java/ folder
    vmArgs = ['-Xmx640m']
    version = 'dev' // Dummy version to keep it from saying "unspecified"

    // Set to true to enable installer generation. Needs to be on the target OS and needs special tooling
    // See https://github.com/fvarrui/JavaPackager#generated-artifacts
    // In future installer/package signing will be added. TODO sign the packages
    generateInstaller = false
}
task packageAijForLinux(type: PackageTask, dependsOn: [build, unZipJresTask, commonFiles]) {
    group 'AstroImageJ Developement'
    platform = io.github.fvarrui.javapackager.model.Platform.linux
    createTarball = true
    jrePath = file("${projectDir}/jres/${jreBaseName}-linux_x64")
    outputs.upToDateWhen { false } // Forces it to always run
}
task packageAijForMac(type: PackageTask, dependsOn: [build, unZipJresTask, commonFiles]) {
    group 'AstroImageJ Developement'
    platform = io.github.fvarrui.javapackager.model.Platform.mac
    createZipball = true
    jrePath = file("${projectDir}/jres/${jreBaseName}-macosx_x64/zulu-8.jre/")
    outputs.upToDateWhen { false } // Forces it to always run
}
task packageAijForWindows(type: PackageTask, dependsOn: [build, unZipJresTask, commonFiles]) {
    group 'AstroImageJ Developement'
    platform = io.github.fvarrui.javapackager.model.Platform.windows
    createZipball = true
    jrePath = file("${projectDir}/jres/${jreBaseName}-win_x64")
    outputs.upToDateWhen { false } // Forces it to always run
}
task packageAij(dependsOn: [ 'packageAijForLinux', 'packageAijForMac', 'packageAijForWindows' ]) {
    group 'AstroImageJ Developement'

    outputs.upToDateWhen { false }
}